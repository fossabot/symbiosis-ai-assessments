!function(dataAndEvents, definition) {
    if ("object" == typeof exports && "undefined" != typeof module) {
      module.exports = definition();
    } else {
      if ("function" == typeof define && define.amd) {
        define(definition);
      } else {
        dataAndEvents.Sweetalert2 = definition();
      }
    }
  }(this, function() {
    var defaults = {
      title : "",
      titleText : "",
      text : "",
      html : "",
      type : null,
      customClass : "",
      target : "body",
      animation : true,
      allowOutsideClick : true,
      allowEscapeKey : true,
      allowEnterKey : true,
      showConfirmButton : true,
      showCancelButton : false,
      preConfirm : null,
      confirmButtonText : "OK",
      confirmButtonAriaLabel : "",
      confirmButtonColor : "#3085d6",
      confirmButtonClass : null,
      cancelButtonText : "Cancel",
      cancelButtonAriaLabel : "",
      cancelButtonColor : "#aaa",
      cancelButtonClass : null,
      buttonsStyling : true,
      reverseButtons : false,
      focusConfirm : true,
      focusCancel : false,
      showCloseButton : false,
      closeButtonAriaLabel : "Close this dialog",
      showLoaderOnConfirm : false,
      imageUrl : null,
      imageWidth : null,
      imageHeight : null,
      imageAlt : "",
      imageClass : null,
      timer : null,
      width : 500,
      padding : 20,
      background : "#fff",
      input : null,
      inputPlaceholder : "",
      inputValue : "",
      inputOptions : {},
      inputAutoTrim : true,
      inputClass : null,
      inputAttributes : {},
      inputValidator : null,
      progressSteps : [],
      currentProgressStep : null,
      progressStepsDistance : "40px",
      onOpen : null,
      onClose : null,
      useRejections : true
    };
    /**
     * @param {Object} attrs
     * @return {?}
     */
    var toObject = function(attrs) {
      var obj = {};
      var attr;
      for (attr in attrs) {
        obj[attrs[attr]] = "swal2-" + attrs[attr];
      }
      return obj;
    };
    var self = toObject(["container", "shown", "iosfix", "modal", "overlay", "fade", "show", "hide", "noanimation", "close", "title", "content", "buttonswrapper", "confirm", "cancel", "icon", "image", "input", "file", "range", "select", "radio", "checkbox", "textarea", "inputerror", "validationerror", "progresssteps", "activeprogressstep", "progresscircle", "progressline", "loading", "styled"]);
    var data = toObject(["success", "warning", "info", "question", "error"]);
    /**
     * @param {string} string
     * @param {number} opt_attributes
     * @return {?}
     */
    var ColorLuminance = function(string, opt_attributes) {
      if ((string = String(string).replace(/[^0-9a-f]/gi, "")).length < 6) {
        string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];
      }
      opt_attributes = opt_attributes || 0;
      /** @type {string} */
      var rgb = "#";
      /** @type {number} */
      var i = 0;
      for (;i < 3;i++) {
        /** @type {number} */
        var n = parseInt(string.substr(2 * i, 2), 16);
        rgb += ("00" + (n = Math.round(Math.min(Math.max(0, n + n * opt_attributes), 255)).toString(16))).substr(n.length);
      }
      return rgb;
    };
    /**
     * @param {Object} m
     * @return {?}
     */
    var nth = function(m) {
      /** @type {Array} */
      var cur = [];
      var idx;
      for (idx in m) {
        if (-1 === cur.indexOf(m[idx])) {
          cur.push(m[idx]);
        }
      }
      return cur;
    };
    /**
     * @param {string} reason
     * @return {undefined}
     */
    var onerror = function(reason) {
      console.warn("SweetAlert2: " + reason);
    };
    /**
     * @param {string} err
     * @return {undefined}
     */
    var done = function(err) {
      console.error("SweetAlert2: " + err);
    };
    var config = {
      previousWindowKeyDown : null,
      previousActiveElement : null,
      previousBodyPadding : null
    };
    /**
     * @param {Object} options
     * @return {?}
     */
    var callback = function(options) {
      /** @type {(Element|null)} */
      var tabPage = document.body.querySelector("." + self.container);
      if (tabPage) {
        tabPage.parentNode.removeChild(tabPage);
      }
      if ("undefined" != typeof document) {
        /** @type {Element} */
        var wrap = document.createElement("div");
        wrap.className = self.container;
        /** @type {string} */
        wrap.innerHTML = html;
        ("string" == typeof options.target ? document.querySelector(options.target) : options.target).appendChild(wrap);
        /** @type {(Element|null)} */
        var selector = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null;
        var element = select(selector, self.input);
        var field = select(selector, self.file);
        /** @type {(Element|null)} */
        var input = selector.querySelector("." + self.range + " input");
        /** @type {(Element|null)} */
        var that = selector.querySelector("." + self.range + " output");
        var elem = select(selector, self.select);
        /** @type {(Element|null)} */
        var selectElem = selector.querySelector("." + self.checkbox + " input");
        var el = select(selector, self.textarea);
        /**
         * @return {undefined}
         */
        element.oninput = function() {
          o.resetValidationError();
        };
        /**
         * @return {undefined}
         */
        field.onchange = function() {
          o.resetValidationError();
        };
        /**
         * @return {undefined}
         */
        input.oninput = function() {
          o.resetValidationError();
          that.value = input.value;
        };
        /**
         * @return {undefined}
         */
        input.onchange = function() {
          o.resetValidationError();
          input.previousSibling.value = input.value;
        };
        /**
         * @return {undefined}
         */
        elem.onchange = function() {
          o.resetValidationError();
        };
        /**
         * @return {undefined}
         */
        selectElem.onchange = function() {
          o.resetValidationError();
        };
        /**
         * @return {undefined}
         */
        el.oninput = function() {
          o.resetValidationError();
        };
        return selector;
      }
      done("SweetAlert2 requires document to initialize");
    };
    /** @type {string} */
    var html = ('\n <div role="dialog" aria-labelledby="' + self.title + '" aria-describedby="' + self.content + '" class="' + self.modal + '" tabindex="-1">\n   <ul class="' + self.progresssteps + '"></ul>\n   <div class="' + self.icon + " " + data.error + '">\n     <span class="swal2-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span>\n   </div>\n   <div class="' + self.icon + " " + data.question + '">?</div>\n   <div class="' + self.icon + " " + 
    data.warning + '">!</div>\n   <div class="' + self.icon + " " + data.info + '">i</div>\n   <div class="' + self.icon + " " + data.success + '">\n     <div class="swal2-success-circular-line-left"></div>\n     <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n     <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n     <div class="swal2-success-circular-line-right"></div>\n   </div>\n   <img class="' + self.image + '" />\n   <h2 class="' + 
    self.title + '" id="' + self.title + '"></h2>\n   <div id="' + self.content + '" class="' + self.content + '"></div>\n   <input class="' + self.input + '" />\n   <input type="file" class="' + self.file + '" />\n   <div class="' + self.range + '">\n     <output></output>\n     <input type="range" />\n   </div>\n   <select class="' + self.select + '"></select>\n   <div class="' + self.radio + '"></div>\n   <label for="' + self.checkbox + '" class="' + self.checkbox + '">\n     <input type="checkbox" />\n   </label>\n   <textarea class="' + 
    self.textarea + '"></textarea>\n   <div class="' + self.validationerror + '" id="' + self.validationerror + '"></div>\n   <div class="' + self.buttonswrapper + '">\n     <button type="button" class="' + self.confirm + '">OK</button>\n     <button type="button" class="' + self.cancel + '">Cancel</button>\n   </div>\n   <button type="button" class="' + self.close + '">\u00d7</button>\n </div>\n').replace(/(^|\n)\s*/g, "");
    /**
     * @return {?}
     */
    var load = function() {
      var beginswith = Array.from((document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null).querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort(function(a, b) {
        /** @type {number} */
        a = parseInt(a.getAttribute("tabindex"));
        /** @type {number} */
        b = parseInt(b.getAttribute("tabindex"));
        return a > b ? 1 : a < b ? -1 : 0;
      });
      /** @type {Array.<?>} */
      var caseSensitive = Array.prototype.slice.call((document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null).querySelectorAll('button, input:not([type=hidden]), textarea, select, a, [tabindex="0"]'));
      return nth(beginswith.concat(caseSensitive));
    };
    /**
     * @param {Element} item
     * @return {undefined}
     */
    var handle = function(item) {
      item.focus();
      if ("file" !== item.type) {
        var value = item.value;
        /** @type {string} */
        item.value = "";
        item.value = value;
      }
    };
    /**
     * @param {Element} name
     * @param {string} className
     * @return {undefined}
     */
    var addClass = function(name, className) {
      if (name && className) {
        className.split(/\s+/).filter(Boolean).forEach(function(dest) {
          name.classList.add(dest);
        });
      }
    };
    /**
     * @param {Element} node
     * @param {?} uri
     * @return {undefined}
     */
    var cb = function(node, uri) {
      if (node && uri) {
        uri.split(/\s+/).filter(Boolean).forEach(function(classToRemove) {
          node.classList.remove(classToRemove);
        });
      }
    };
    /**
     * @param {Element} node
     * @param {?} target
     * @return {?}
     */
    var select = function(node, target) {
      /** @type {number} */
      var j = 0;
      for (;j < node.childNodes.length;j++) {
        if (!!node.childNodes[j].classList && node.childNodes[j].classList.contains(target)) {
          return node.childNodes[j];
        }
      }
    };
    /**
     * @param {Element} element
     * @param {(number|string)} value
     * @return {undefined}
     */
    var css = function(element, value) {
      if (!value) {
        /** @type {string} */
        value = "block";
      }
      /** @type {string} */
      element.style.opacity = "";
      /** @type {(number|string)} */
      element.style.display = value;
    };
    /**
     * @param {?} node
     * @return {undefined}
     */
    var fn = function(node) {
      /** @type {string} */
      node.style.opacity = "";
      /** @type {string} */
      node.style.display = "none";
    };
    /**
     * @param {HTMLElement} context
     * @return {undefined}
     */
    var getAll = function(context) {
      for (;context.firstChild;) {
        context.removeChild(context.firstChild);
      }
    };
    /**
     * @param {Element} element
     * @param {string} p
     * @return {undefined}
     */
    var getStyle = function(element, p) {
      if (element.style.removeProperty) {
        element.style.removeProperty(p);
      } else {
        element.style.removeAttribute(p);
      }
    };
    var name = function() {
      /** @type {Element} */
      var elem = document.createElement("div");
      var nameToAliasesMap = {
        WebkitAnimation : "webkitAnimationEnd",
        OAnimation : "oAnimationEnd oanimationend",
        animation : "animationend"
      };
      var name;
      for (name in nameToAliasesMap) {
        if (nameToAliasesMap.hasOwnProperty(name) && undefined !== elem.style[name]) {
          return nameToAliasesMap[name];
        }
      }
      return false;
    }();
    /**
     * @return {undefined}
     */
    var preservingScrollPosition = function() {
      /** @type {null} */
      window.onkeydown = null;
      if (null && null.focus) {
        /** @type {number} */
        var x = window.scrollX;
        /** @type {number} */
        var y = window.scrollY;
        null.focus();
        if (x && y) {
          window.scrollTo(x, y);
        }
      }
    };
    /**
     * @return {?}
     */
    var initialize = function() {
      if ("ontouchstart" in window || navigator.msMaxTouchPoints) {
        return 0;
      }
      /** @type {Element} */
      var scrollDiv = document.createElement("div");
      /** @type {string} */
      scrollDiv.style.width = "50px";
      /** @type {string} */
      scrollDiv.style.height = "50px";
      /** @type {string} */
      scrollDiv.style.overflow = "scroll";
      document.body.appendChild(scrollDiv);
      /** @type {number} */
      var oSelf = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return oSelf;
    };
    /**
     * @param {Function} elem
     * @param {number} delay
     * @return {?}
     */
    var next = function(elem, delay) {
      var timer = undefined;
      return function() {
        clearTimeout(timer);
        /** @type {number} */
        timer = setTimeout(function() {
          /** @type {null} */
          timer = null;
          elem();
        }, delay);
      };
    };
    /** @type {function (?): ?} */
    var parse = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(settings) {
      return typeof settings;
    } : function(b) {
      return b && ("function" == typeof Symbol && (b.constructor === Symbol && b !== Symbol.prototype)) ? "symbol" : typeof b;
    };
    (function() {
      /**
       * @param {string} val
       * @return {undefined}
       */
      function isConstant(val) {
        /** @type {string} */
        this.value = val;
      }
      /**
       * @param {Object} formatters
       * @return {undefined}
       */
      function GameLoop(formatters) {
        /**
         * @param {string} name
         * @param {?} data
         * @return {undefined}
         */
        function loop(name, data) {
          try {
            var self = formatters[name](data);
            var target = self.value;
            if (target instanceof isConstant) {
              Promise.resolve(target.value).then(function(k) {
                loop("next", k);
              }, function(k) {
                loop("throw", k);
              });
            } else {
              callback(self.done ? "return" : "normal", self.value);
            }
          } catch (ex) {
            callback("throw", ex);
          }
        }
        /**
         * @param {string} str
         * @param {string} error
         * @return {undefined}
         */
        function callback(str, error) {
          switch(str) {
            case "return":
              params.resolve({
                value : error,
                done : true
              });
              break;
            case "throw":
              params.reject(error);
              break;
            default:
              params.resolve({
                value : error,
                done : false
              });
          }
          if (params = params.next) {
            loop(params.key, params.arg);
          } else {
            /** @type {null} */
            options = null;
          }
        }
        var params;
        var options;
        /**
         * @param {string} name
         * @param {?} data
         * @return {?}
         */
        this._invoke = function(name, data) {
          return new Promise(function(resolveFns, reject) {
            var context = {
              key : name,
              arg : data,
              resolve : resolveFns,
              /** @type {Function} */
              reject : reject,
              next : null
            };
            if (options) {
              options = options.next = context;
            } else {
              params = options = context;
              loop(name, data);
            }
          });
        };
        if ("function" != typeof formatters.return) {
          this.return = undefined;
        }
      }
      if ("function" == typeof Symbol && Symbol.asyncIterator) {
        /**
         * @return {?}
         */
        GameLoop.prototype[Symbol.asyncIterator] = function() {
          return this;
        };
      }
      /**
       * @param {?} event
       * @return {?}
       */
      GameLoop.prototype.next = function(event) {
        return this._invoke("next", event);
      };
      /**
       * @param {?} data
       * @return {?}
       */
      GameLoop.prototype.throw = function(data) {
        return this._invoke("throw", data);
      };
      /**
       * @param {?} event
       * @return {?}
       */
      GameLoop.prototype.return = function(event) {
        return this._invoke("return", event);
      };
    })();
    var extend = Object.assign || function(object) {
      /** @type {number} */
      var i = 1;
      for (;i < arguments.length;i++) {
        var iterable = arguments[i];
        var key;
        for (key in iterable) {
          if (Object.prototype.hasOwnProperty.call(iterable, key)) {
            object[key] = iterable[key];
          }
        }
      }
      return object;
    };
    var params = extend({}, defaults);
    /** @type {Array} */
    var buffer = [];
    var UNDEFINED = undefined;
    if ("undefined" == typeof Promise) {
      done("This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/limonte/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)");
    }
    /**
     * @param {Object} options
     * @return {?}
     */
    var init = function(options) {
      if ("string" == typeof options.target && !document.querySelector(options.target) || "string" != typeof options.target && !options.target.appendChild) {
        onerror('Target parameter is not valid, defaulting to "body"');
        /** @type {string} */
        options.target = "body";
      }
      var el = undefined;
      var start = x() ? x().querySelector("." + self.modal) : null;
      /** @type {(Element|null|string)} */
      var end = "string" == typeof options.target ? document.querySelector(options.target) : options.target;
      el = start && (end && start.parentNode !== end.parentNode) ? callback(options) : start || callback(options);
      var option;
      for (option in options) {
        if (!o.isValidParameter(option)) {
          onerror('Unknown parameter "' + option + '"');
        }
      }
      el.style.width = "number" == typeof options.width ? options.width + "px" : options.width;
      /** @type {string} */
      el.style.padding = options.padding + "px";
      el.style.background = options.background;
      var cols = el.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix");
      /** @type {number} */
      var x = 0;
      for (;x < cols.length;x++) {
        cols[x].style.background = options.background;
      }
      var $ = $(self.title);
      var div = $(self.content);
      var child = $(self.buttonswrapper);
      var node = $(self.confirm);
      var elem = $(self.cancel);
      var container = $(self.close);
      if (options.titleText) {
        $.innerText = options.titleText;
      } else {
        $.innerHTML = options.title.split("\n").join("<br />");
      }
      if (options.text || options.html) {
        if ("object" === parse(options.html)) {
          /** @type {string} */
          div.innerHTML = "";
          if (0 in options.html) {
            /** @type {number} */
            var key = 0;
            for (;key in options.html;key++) {
              div.appendChild(options.html[key].cloneNode(true));
            }
          } else {
            div.appendChild(options.html.cloneNode(true));
          }
        } else {
          if (options.html) {
            div.innerHTML = options.html;
          } else {
            if (options.text) {
              div.textContent = options.text;
            }
          }
        }
        css(div);
      } else {
        fn(div);
      }
      if (options.showCloseButton) {
        container.setAttribute("aria-label", options.closeButtonAriaLabel);
        css(container);
      } else {
        fn(container);
      }
      el.className = self.modal;
      if (options.customClass) {
        addClass(el, options.customClass);
      }
      var clone = $(self.progresssteps);
      /** @type {number} */
      var y = parseInt(null === options.currentProgressStep ? o.getQueueStep() : options.currentProgressStep, 10);
      if (options.progressSteps.length) {
        css(clone);
        getAll(clone);
        if (y >= options.progressSteps.length) {
          onerror("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)");
        }
        options.progressSteps.forEach(function(html, x) {
          /** @type {Element} */
          var container = document.createElement("li");
          addClass(container, self.progresscircle);
          /** @type {string} */
          container.innerHTML = html;
          if (x === y) {
            addClass(container, self.activeprogressstep);
          }
          clone.appendChild(container);
          if (x !== options.progressSteps.length - 1) {
            /** @type {Element} */
            var node = document.createElement("li");
            addClass(node, self.progressline);
            node.style.width = options.progressStepsDistance;
            clone.appendChild(node);
          }
        });
      } else {
        fn(clone);
      }
      /** @type {NodeList} */
      var codeSegments = (document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null).querySelectorAll("." + self.icon);
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        fn(codeSegments[i]);
      }
      if (options.type) {
        /** @type {boolean} */
        var D = false;
        var name;
        for (name in data) {
          if (options.type === name) {
            /** @type {boolean} */
            D = true;
            break;
          }
        }
        if (!D) {
          done("Unknown alert type: " + options.type);
          return false;
        }
        var parent = el.querySelector("." + self.icon + "." + data[options.type]);
        css(parent);
        if (options.animation) {
          switch(options.type) {
            case "success":
              addClass(parent, "swal2-animate-success-icon");
              addClass(parent.querySelector(".swal2-success-line-tip"), "swal2-animate-success-line-tip");
              addClass(parent.querySelector(".swal2-success-line-long"), "swal2-animate-success-line-long");
              break;
            case "error":
              addClass(parent, "swal2-animate-error-icon");
              addClass(parent.querySelector(".swal2-x-mark"), "swal2-animate-x-mark");
          }
        }
      }
      var obj = $(self.image);
      if (options.imageUrl) {
        obj.setAttribute("src", options.imageUrl);
        obj.setAttribute("alt", options.imageAlt);
        css(obj);
        if (options.imageWidth) {
          obj.setAttribute("width", options.imageWidth);
        } else {
          obj.removeAttribute("width");
        }
        if (options.imageHeight) {
          obj.setAttribute("height", options.imageHeight);
        } else {
          obj.removeAttribute("height");
        }
        obj.className = self.image;
        if (options.imageClass) {
          addClass(obj, options.imageClass);
        }
      } else {
        fn(obj);
      }
      if (options.showCancelButton) {
        /** @type {string} */
        elem.style.display = "inline-block";
      } else {
        fn(elem);
      }
      if (options.showConfirmButton) {
        getStyle(node, "display");
      } else {
        fn(node);
      }
      if (options.showConfirmButton || options.showCancelButton) {
        css(child);
      } else {
        fn(child);
      }
      node.innerHTML = options.confirmButtonText;
      elem.innerHTML = options.cancelButtonText;
      node.setAttribute("aria-label", options.confirmButtonAriaLabel);
      elem.setAttribute("aria-label", options.cancelButtonAriaLabel);
      if (options.buttonsStyling) {
        node.style.backgroundColor = options.confirmButtonColor;
        elem.style.backgroundColor = options.cancelButtonColor;
      }
      node.className = self.confirm;
      addClass(node, options.confirmButtonClass);
      elem.className = self.cancel;
      addClass(elem, options.cancelButtonClass);
      if (options.buttonsStyling) {
        addClass(node, self.styled);
        addClass(elem, self.styled);
      } else {
        cb(node, self.styled);
        cb(elem, self.styled);
        /** @type {string} */
        node.style.backgroundColor = node.style.borderLeftColor = node.style.borderRightColor = "";
        /** @type {string} */
        elem.style.backgroundColor = elem.style.borderLeftColor = elem.style.borderRightColor = "";
      }
      if (true === options.animation) {
        cb(el, self.noanimation);
      } else {
        addClass(el, self.noanimation);
      }
      if (options.showLoaderOnConfirm && !options.preConfirm) {
        onerror("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://limonte.github.io/sweetalert2/#ajax-request");
      }
    };
    /**
     * @param {?} res
     * @param {Object} handler
     * @return {undefined}
     */
    var onSuccess = function(res, handler) {
      /** @type {(Element|null)} */
      var textarea = document.body.querySelector("." + self.container);
      /** @type {(Element|null)} */
      var node = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null;
      if (res) {
        addClass(node, self.show);
        addClass(textarea, self.fade);
        cb(node, self.hide);
      } else {
        cb(node, self.fade);
      }
      css(node);
      /** @type {string} */
      textarea.style.overflowY = "hidden";
      if (name && !(!!node.classList && node.classList.contains(self.noanimation))) {
        node.addEventListener(name, function onError() {
          node.removeEventListener(name, onError);
          /** @type {string} */
          textarea.style.overflowY = "auto";
        });
      } else {
        /** @type {string} */
        textarea.style.overflowY = "auto";
      }
      addClass(document.documentElement, self.shown);
      addClass(document.body, self.shown);
      addClass(textarea, self.shown);
      show();
      start();
      config.previousActiveElement = document.activeElement;
      if (null !== handler && "function" == typeof handler) {
        setTimeout(function() {
          handler(node);
        });
      }
    };
    /**
     * @return {undefined}
     */
    var show = function() {
      if (true && document.body.scrollHeight > window.innerHeight) {
        /** @type {(number|string)} */
        config.previousBodyPadding = document.body.style.paddingRight;
        /** @type {string} */
        document.body.style.paddingRight = initialize() + "px";
      }
    };
    /**
     * @return {undefined}
     */
    var removeChild = function() {
    };
    /**
     * @return {undefined}
     */
    var start = function() {
      if (/iPad|iPhone|iPod/.test(navigator.userAgent) && (!window.MSStream && !(!!document.body.classList && document.body.classList.contains(self.iosfix)))) {
        /** @type {number} */
        var newY = document.body.scrollTop;
        /** @type {string} */
        document.body.style.top = -1 * newY + "px";
        addClass(document.body, self.iosfix);
      }
    };
    /**
     * @return {undefined}
     */
    var check = function() {
      if (!!document.body.classList && document.body.classList.contains(self.iosfix)) {
        /** @type {number} */
        var lineHeight = parseInt(document.body.style.top, 10);
        cb(document.body, self.iosfix);
        /** @type {string} */
        document.body.style.top = "";
        /** @type {number} */
        document.body.scrollTop = -1 * lineHeight;
      }
    };
    /**
     * @return {?}
     */
    var o = function test() {
      /** @type {number} */
      var n = arguments.length;
      /** @type {Array} */
      var data = Array(n);
      /** @type {number} */
      var i = 0;
      for (;i < n;i++) {
        data[i] = arguments[i];
      }
      if (undefined === data[0]) {
        done("SweetAlert2 expects at least 1 attribute!");
        return false;
      }
      var options = extend({}, params);
      switch(parse(data[0])) {
        case "string":
          options.title = data[0];
          options.html = data[1];
          options.type = data[2];
          break;
        case "object":
          extend(options, data[0]);
          options.extraParams = data[0].extraParams;
          if ("email" === options.input && null === options.inputValidator) {
            /**
             * @param {?} el
             * @return {?}
             */
            options.inputValidator = function(el) {
              return new Promise(function(Application, $sanitize) {
                if (/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/.test(el)) {
                  Application();
                } else {
                  $sanitize("Invalid email address");
                }
              });
            };
          }
          if ("url" === options.input && null === options.inputValidator) {
            /**
             * @param {?} el
             * @return {?}
             */
            options.inputValidator = function(el) {
              return new Promise(function(Application, $sanitize) {
                if (/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)$/.test(el)) {
                  Application();
                } else {
                  $sanitize("Invalid URL");
                }
              });
            };
          }
          break;
        default:
          done('Unexpected type of argument! Expected "string" or "object", got ' + parse(data[0]));
          return false;
      }
      init(options);
      /** @type {(Element|null)} */
      var action2Node = document.body.querySelector("." + self.container);
      /** @type {(Element|null)} */
      var target = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null;
      return new Promise(function(log, expect) {
        if (options.timer) {
          /** @type {number} */
          target.timeout = setTimeout(function() {
            test.closeModal(options.onClose);
            if (options.useRejections) {
              expect("timer");
            } else {
              log({
                dismiss : "timer"
              });
            }
          }, options.timer);
        }
        /**
         * @param {string} type
         * @return {?}
         */
        var $ = function(type) {
          if (!(type = type || options.input)) {
            return null;
          }
          switch(type) {
            case "select":
            ;
            case "textarea":
            ;
            case "file":
              return select(target, self[type]);
            case "checkbox":
              return target.querySelector("." + self.checkbox + " input");
            case "radio":
              return target.querySelector("." + self.radio + " input:checked") || target.querySelector("." + self.radio + " input:first-child");
            case "range":
              return target.querySelector("." + self.range + " input");
            default:
              return select(target, self.input);
          }
        };
        /**
         * @return {?}
         */
        var update = function() {
          var el = $();
          if (!el) {
            return null;
          }
          switch(options.input) {
            case "checkbox":
              return el.checked ? 1 : 0;
            case "radio":
              return el.checked ? el.value : null;
            case "file":
              return el.files.length ? el.files[0] : null;
            default:
              return options.inputAutoTrim ? el.value.trim() : el.value;
          }
        };
        if (options.input) {
          setTimeout(function() {
            var e = $();
            if (e) {
              handle(e);
            }
          }, 0);
        }
        /**
         * @param {?} value
         * @return {undefined}
         */
        var callback = function(value) {
          if (options.showLoaderOnConfirm) {
            test.showLoading();
          }
          if (options.preConfirm) {
            options.preConfirm(value, options.extraParams).then(function(err) {
              test.closeModal(options.onClose);
              log(err || value);
            }, function(compiled) {
              test.hideLoading();
              if (compiled) {
                test.showValidationError(compiled);
              }
            });
          } else {
            test.closeModal(options.onClose);
            log(options.useRejections ? value : {
              value : value
            });
          }
        };
        /**
         * @param {Object} e
         * @return {undefined}
         */
        var handler = function(e) {
          var event = e || window.event;
          var node = event.target || event.srcElement;
          var elem = callback(e.confirm);
          var container = callback(e.cancel);
          var nType = elem && (elem === node || elem.contains(node));
          var buttons = container && (container === node || container.contains(node));
          switch(event.type) {
            case "mouseover":
            ;
            case "mouseup":
              if (options.buttonsStyling) {
                if (nType) {
                  elem.style.backgroundColor = ColorLuminance(options.confirmButtonColor, -0.1);
                } else {
                  if (buttons) {
                    container.style.backgroundColor = ColorLuminance(options.cancelButtonColor, -0.1);
                  }
                }
              }
              break;
            case "mouseout":
              if (options.buttonsStyling) {
                if (nType) {
                  elem.style.backgroundColor = options.confirmButtonColor;
                } else {
                  if (buttons) {
                    container.style.backgroundColor = options.cancelButtonColor;
                  }
                }
              }
              break;
            case "mousedown":
              if (options.buttonsStyling) {
                if (nType) {
                  elem.style.backgroundColor = ColorLuminance(options.confirmButtonColor, -0.2);
                } else {
                  if (buttons) {
                    container.style.backgroundColor = ColorLuminance(options.cancelButtonColor, -0.2);
                  }
                }
              }
              break;
            case "click":
              if (nType && test.isVisible()) {
                test.disableButtons();
                if (options.input) {
                  var a = update();
                  if (options.inputValidator) {
                    test.disableInput();
                    options.inputValidator(a, options.extraParams).then(function() {
                      test.enableButtons();
                      test.enableInput();
                      callback(a);
                    }, function(compiled) {
                      test.enableButtons();
                      test.enableInput();
                      if (compiled) {
                        test.showValidationError(compiled);
                      }
                    });
                  } else {
                    callback(a);
                  }
                } else {
                  callback(true);
                }
              } else {
                if (buttons && test.isVisible()) {
                  test.disableButtons();
                  test.closeModal(options.onClose);
                  if (options.useRejections) {
                    expect("cancel");
                  } else {
                    log({
                      dismiss : "cancel"
                    });
                  }
                }
              }
            ;
          }
        };
        /** @type {NodeList} */
        var liClass = target.querySelectorAll("button");
        /** @type {number} */
        var k = 0;
        for (;k < liClass.length;k++) {
          /** @type {function (Object): undefined} */
          liClass[k].onclick = handler;
          /** @type {function (Object): undefined} */
          liClass[k].onmouseover = handler;
          /** @type {function (Object): undefined} */
          liClass[k].onmouseout = handler;
          /** @type {function (Object): undefined} */
          liClass[k].onmousedown = handler;
        }
        /**
         * @return {undefined}
         */
        callback(self.close).onclick = function() {
          test.closeModal(options.onClose);
          if (options.useRejections) {
            expect("close");
          } else {
            log({
              dismiss : "close"
            });
          }
        };
        /**
         * @param {Event} ev
         * @return {undefined}
         */
        action2Node.onclick = function(ev) {
          if (ev.target === action2Node && options.allowOutsideClick) {
            test.closeModal(options.onClose);
            if (options.useRejections) {
              expect("overlay");
            } else {
              log({
                dismiss : "overlay"
              });
            }
          }
        };
        var r = callback(self.buttonswrapper);
        var node = callback(self.confirm);
        var el = callback(self.cancel);
        if (options.reverseButtons) {
          node.parentNode.insertBefore(el, node);
        } else {
          node.parentNode.insertBefore(node, el);
        }
        /**
         * @param {number} result
         * @param {number} expectedNumberOfNonCommentArgs
         * @return {?}
         */
        var close = function(result, expectedNumberOfNonCommentArgs) {
          var tests = load(options.focusCancel);
          /** @type {number} */
          var i = 0;
          for (;i < tests.length;i++) {
            if ((result += expectedNumberOfNonCommentArgs) === tests.length) {
              /** @type {number} */
              result = 0;
            } else {
              if (-1 === result) {
                /** @type {number} */
                result = tests.length - 1;
              }
            }
            var node = tests[result];
            if (node.offsetWidth || (node.offsetHeight || node.getClientRects().length)) {
              return node.focus();
            }
          }
        };
        /**
         * @param {Object} e
         * @return {undefined}
         */
        var listener = function(e) {
          var ev = e || window.event;
          if ("Enter" === ev.key) {
            if (ev.target === $()) {
              test.clickConfirm();
              ev.preventDefault();
            }
          } else {
            if ("Tab" === ev.key) {
              var elem = ev.target || ev.srcElement;
              var codeSegments = load(options.focusCancel);
              /** @type {number} */
              var expectationResult = -1;
              /** @type {number} */
              var i = 0;
              for (;i < codeSegments.length;i++) {
                if (elem === codeSegments[i]) {
                  /** @type {number} */
                  expectationResult = i;
                  break;
                }
              }
              if (ev.shiftKey) {
                close(expectationResult, -1);
              } else {
                close(expectationResult, 1);
              }
              ev.stopPropagation();
              ev.preventDefault();
            } else {
              if (["ArrowLeft", "ArrowRight", "ArrowUp", "Arrowdown"].includes(ev.key)) {
                if (document.activeElement === node && (el.offsetWidth || (el.offsetHeight || el.getClientRects().length))) {
                  el.focus();
                } else {
                  if (document.activeElement === el && (node.offsetWidth || (node.offsetHeight || node.getClientRects().length))) {
                    node.focus();
                  }
                }
              } else {
                if ("Escape" === ev.key && true === options.allowEscapeKey) {
                  test.closeModal(options.onClose);
                  if (options.useRejections) {
                    expect("esc");
                  } else {
                    log({
                      dismiss : "esc"
                    });
                  }
                }
              }
            }
          }
        };
        if (!(window.onkeydown && window.onkeydown.toString() === listener.toString())) {
          /** @type {(function ((Event|null)): ?|null)} */
          config.previousWindowKeyDown = window.onkeydown;
          /** @type {function (Object): undefined} */
          window.onkeydown = listener;
        }
        if (options.buttonsStyling) {
          node.style.borderLeftColor = options.confirmButtonColor;
          node.style.borderRightColor = options.confirmButtonColor;
        }
        /** @type {function (): undefined} */
        test.hideLoading = test.disableLoading = function() {
          if (!options.showConfirmButton) {
            fn(node);
            if (!options.showCancelButton) {
              fn(callback(self.buttonswrapper));
            }
          }
          cb(r, self.loading);
          cb(target, self.loading);
          target.removeAttribute("aria-busy");
          /** @type {boolean} */
          node.disabled = false;
          /** @type {boolean} */
          el.disabled = false;
        };
        /**
         * @return {?}
         */
        test.getTitle = function() {
          return callback(self.title);
        };
        /**
         * @return {?}
         */
        test.getContent = function() {
          return callback(self.content);
        };
        /**
         * @return {?}
         */
        test.getInput = function() {
          return $();
        };
        /**
         * @return {?}
         */
        test.getImage = function() {
          return callback(self.image);
        };
        /**
         * @return {?}
         */
        test.getButtonsWrapper = function() {
          return callback(self.buttonswrapper);
        };
        /**
         * @return {?}
         */
        test.getConfirmButton = function() {
          return callback(self.confirm);
        };
        /**
         * @return {?}
         */
        test.getCancelButton = function() {
          return callback(self.cancel);
        };
        /**
         * @return {undefined}
         */
        test.enableButtons = function() {
          /** @type {boolean} */
          node.disabled = false;
          /** @type {boolean} */
          el.disabled = false;
        };
        /**
         * @return {undefined}
         */
        test.disableButtons = function() {
          /** @type {boolean} */
          node.disabled = true;
          /** @type {boolean} */
          el.disabled = true;
        };
        /**
         * @return {undefined}
         */
        test.enableConfirmButton = function() {
          /** @type {boolean} */
          node.disabled = false;
        };
        /**
         * @return {undefined}
         */
        test.disableConfirmButton = function() {
          /** @type {boolean} */
          node.disabled = true;
        };
        /**
         * @return {?}
         */
        test.enableInput = function() {
          var me = $();
          if (!me) {
            return false;
          }
          if ("radio" === me.type) {
            var codeSegments = me.parentNode.parentNode.querySelectorAll("input");
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
              /** @type {boolean} */
              codeSegments[i].disabled = false;
            }
          } else {
            /** @type {boolean} */
            me.disabled = false;
          }
        };
        /**
         * @return {?}
         */
        test.disableInput = function() {
          var me = $();
          if (!me) {
            return false;
          }
          if (me && "radio" === me.type) {
            var codeSegments = me.parentNode.parentNode.querySelectorAll("input");
            /** @type {number} */
            var i = 0;
            for (;i < codeSegments.length;i++) {
              /** @type {boolean} */
              codeSegments[i].disabled = true;
            }
          } else {
            /** @type {boolean} */
            me.disabled = true;
          }
        };
        test.recalculateHeight = next(function() {
          /** @type {(Element|null)} */
          var body = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null;
          if (body) {
            /** @type {string} */
            var gutterDisplay = body.style.display;
            /** @type {string} */
            body.style.minHeight = "";
            css(body);
            /** @type {string} */
            body.style.minHeight = body.scrollHeight + 1 + "px";
            /** @type {string} */
            body.style.display = gutterDisplay;
          }
        }, 50);
        /**
         * @param {string} compiled
         * @return {undefined}
         */
        test.showValidationError = function(compiled) {
          var clone = callback(self.validationerror);
          /** @type {string} */
          clone.innerHTML = compiled;
          css(clone);
          var target = $();
          if (target) {
            target.setAttribute("aria-invalid", true);
            target.setAttribute("aria-describedBy", self.validationerror);
            handle(target);
            addClass(target, self.inputerror);
          }
        };
        /**
         * @return {undefined}
         */
        test.resetValidationError = function() {
          var current = callback(self.validationerror);
          fn(current);
          test.recalculateHeight();
          var input = $();
          if (input) {
            input.removeAttribute("aria-invalid");
            input.removeAttribute("aria-describedBy");
            cb(input, self.inputerror);
          }
        };
        /**
         * @return {?}
         */
        test.getProgressSteps = function() {
          return options.progressSteps;
        };
        /**
         * @param {Array} uri
         * @return {undefined}
         */
        test.setProgressSteps = function(uri) {
          /** @type {Array} */
          options.progressSteps = uri;
          init(options);
        };
        /**
         * @return {undefined}
         */
        test.showProgressSteps = function() {
          css(callback(self.progresssteps));
        };
        /**
         * @return {undefined}
         */
        test.hideProgressSteps = function() {
          fn(callback(self.progresssteps));
        };
        test.enableButtons();
        test.hideLoading();
        test.resetValidationError();
        /** @type {Array} */
        var tags = ["input", "file", "range", "select", "radio", "checkbox", "textarea"];
        var element = undefined;
        /** @type {number} */
        var index = 0;
        for (;index < tags.length;index++) {
          var value = self[tags[index]];
          var item = select(target, value);
          if (element = $(tags[index])) {
            var i;
            for (i in element.attributes) {
              if (element.attributes.hasOwnProperty(i)) {
                var tag = element.attributes[i].name;
                if ("type" !== tag && "value" !== tag) {
                  element.removeAttribute(tag);
                }
              }
            }
            var key;
            for (key in options.inputAttributes) {
              element.setAttribute(key, options.inputAttributes[key]);
            }
          }
          item.className = value;
          if (options.inputClass) {
            addClass(item, options.inputClass);
          }
          fn(item);
        }
        var render = undefined;
        switch(options.input) {
          case "text":
          ;
          case "email":
          ;
          case "password":
          ;
          case "number":
          ;
          case "tel":
          ;
          case "url":
            (element = select(target, self.input)).value = options.inputValue;
            element.placeholder = options.inputPlaceholder;
            element.type = options.input;
            css(element);
            break;
          case "file":
            (element = select(target, self.file)).placeholder = options.inputPlaceholder;
            element.type = options.input;
            css(element);
            break;
          case "range":
            var child = select(target, self.range);
            var inp = child.querySelector("input");
            var o = child.querySelector("output");
            inp.value = options.inputValue;
            inp.type = options.input;
            o.value = options.inputValue;
            css(child);
            break;
          case "select":
            var parent = select(target, self.select);
            /** @type {string} */
            parent.innerHTML = "";
            if (options.inputPlaceholder) {
              /** @type {Element} */
              var opt = document.createElement("option");
              opt.innerHTML = options.inputPlaceholder;
              /** @type {string} */
              opt.value = "";
              /** @type {boolean} */
              opt.disabled = true;
              /** @type {boolean} */
              opt.selected = true;
              parent.appendChild(opt);
            }
            /**
             * @param {Object} obj
             * @return {undefined}
             */
            render = function(obj) {
              var i;
              for (i in obj) {
                /** @type {Element} */
                var node = document.createElement("option");
                /** @type {string} */
                node.value = i;
                node.innerHTML = obj[i];
                if (options.inputValue === i) {
                  /** @type {boolean} */
                  node.selected = true;
                }
                parent.appendChild(node);
              }
              css(parent);
              parent.focus();
            };
            break;
          case "radio":
            var container = select(target, self.radio);
            /** @type {string} */
            container.innerHTML = "";
            /**
             * @param {Object} obj
             * @return {undefined}
             */
            render = function(obj) {
              var i;
              for (i in obj) {
                /** @type {Element} */
                var input = document.createElement("input");
                /** @type {Element} */
                var label = document.createElement("label");
                /** @type {Element} */
                var style = document.createElement("span");
                /** @type {string} */
                input.type = "radio";
                input.name = self.radio;
                /** @type {string} */
                input.value = i;
                if (options.inputValue === i) {
                  /** @type {boolean} */
                  input.checked = true;
                }
                style.innerHTML = obj[i];
                label.appendChild(input);
                label.appendChild(style);
                /** @type {string} */
                label.for = input.id;
                container.appendChild(label);
              }
              css(container);
              var $input = container.querySelectorAll("input");
              if ($input.length) {
                $input[0].focus();
              }
            };
            break;
          case "checkbox":
            var div = select(target, self.checkbox);
            var filter = $("checkbox");
            /** @type {string} */
            filter.type = "checkbox";
            /** @type {number} */
            filter.value = 1;
            filter.id = self.checkbox;
            /** @type {boolean} */
            filter.checked = Boolean(options.inputValue);
            var span = div.getElementsByTagName("span");
            if (span.length) {
              div.removeChild(span[0]);
            }
            (span = document.createElement("span")).innerHTML = options.inputPlaceholder;
            div.appendChild(span);
            css(div);
            break;
          case "textarea":
            var elem = select(target, self.textarea);
            elem.value = options.inputValue;
            elem.placeholder = options.inputPlaceholder;
            css(elem);
            break;
          case null:
            break;
          default:
            done('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "' + options.input + '"');
        }
        if (!("select" !== options.input && "radio" !== options.input)) {
          if (options.inputOptions instanceof Promise) {
            test.showLoading();
            options.inputOptions.then(function(qualifier) {
              test.hideLoading();
              render(qualifier);
            });
          } else {
            if ("object" === parse(options.inputOptions)) {
              render(options.inputOptions);
            } else {
              done("Unexpected type of inputOptions! Expected object or Promise, got " + parse(options.inputOptions));
            }
          }
        }
        onSuccess(options.animation, options.onOpen);
        if (options.allowEnterKey) {
          if (options.focusCancel && (el.offsetWidth || (el.offsetHeight || el.getClientRects().length))) {
            el.focus();
          } else {
            if (options.focusConfirm && (node.offsetWidth || (node.offsetHeight || node.getClientRects().length))) {
              node.focus();
            } else {
              close(-1, 1);
            }
          }
        } else {
          if (document.activeElement) {
            document.activeElement.blur();
          }
        }
        /** @type {number} */
        document.body.querySelector("." + self.container).scrollTop = 0;
        if (!("undefined" == typeof MutationObserver || UNDEFINED)) {
          (UNDEFINED = new MutationObserver(test.recalculateHeight)).observe(target, {
            childList : true,
            characterData : true,
            subtree : true
          });
        }
      });
    };
    /**
     * @return {?}
     */
    o.isVisible = function() {
      return!!(document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null);
    };
    /**
     * @param {Array} data
     * @return {?}
     */
    o.queue = function(data) {
      /** @type {Array} */
      buffer = data;
      /**
       * @return {undefined}
       */
      var fn = function() {
        /** @type {Array} */
        buffer = [];
        document.body.removeAttribute("data-swal2-queue-step");
      };
      /** @type {Array} */
      var assigns = [];
      return new Promise(function(worker, cb) {
        !function run(i, fixturePath) {
          if (i < buffer.length) {
            document.body.setAttribute("data-swal2-queue-step", i);
            o(buffer[i]).then(function(vvar) {
              assigns.push(vvar);
              run(i + 1, fixturePath);
            }, function(outErr) {
              fn();
              cb(outErr);
            });
          } else {
            fn();
            worker(assigns);
          }
        }(0);
      });
    };
    /**
     * @return {?}
     */
    o.getQueueStep = function() {
      return document.body.getAttribute("data-swal2-queue-step");
    };
    /**
     * @param {?} value
     * @param {boolean} i
     * @return {?}
     */
    o.insertQueueStep = function(value, i) {
      return i && i < buffer.length ? buffer.splice(i, 0, value) : buffer.push(value);
    };
    /**
     * @param {?} i
     * @return {undefined}
     */
    o.deleteQueueStep = function(i) {
      if (undefined !== buffer[i]) {
        buffer.splice(i, 1);
      }
    };
    /** @type {function (?): undefined} */
    o.close = o.closeModal = function(fn) {
      /** @type {(Element|null)} */
      var tabPage = document.body.querySelector("." + self.container);
      /** @type {(Element|null)} */
      var obj = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null;
      if (obj) {
        cb(obj, self.show);
        addClass(obj, self.hide);
        clearTimeout(obj.timeout);
        preservingScrollPosition();
        /**
         * @return {undefined}
         */
        var close = function() {
          if (tabPage.parentNode) {
            tabPage.parentNode.removeChild(tabPage);
          }
          cb(document.documentElement, self.shown);
          cb(document.body, self.shown);
          removeChild();
          check();
        };
        if (name && !(!!obj.classList && obj.classList.contains(self.noanimation))) {
          obj.addEventListener(name, function f() {
            obj.removeEventListener(name, f);
            if (!!obj.classList && obj.classList.contains(self.hide)) {
              close();
            }
          });
        } else {
          close();
        }
        if (null !== fn && "function" == typeof fn) {
          setTimeout(function() {
            fn(obj);
          });
        }
      }
    };
    /**
     * @return {?}
     */
    o.clickConfirm = function() {
      return(document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.confirm) : null).click();
    };
    /**
     * @return {?}
     */
    o.clickCancel = function() {
      return(document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.cancel) : null).click();
    };
    /** @type {function (): undefined} */
    o.showLoading = o.enableLoading = function() {
      /** @type {(Element|null)} */
      var current = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null;
      if (!current) {
        o("");
      }
      /** @type {(Element|null)} */
      current = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.modal) : null;
      /** @type {(Element|null)} */
      var node = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.buttonswrapper) : null;
      /** @type {(Element|null)} */
      var clone = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.confirm) : null;
      /** @type {(Element|null)} */
      var cur = document.body.querySelector("." + self.container) ? document.body.querySelector("." + self.container).querySelector("." + self.cancel) : null;
      css(node);
      css(clone, "inline-block");
      addClass(node, self.loading);
      addClass(current, self.loading);
      /** @type {boolean} */
      clone.disabled = true;
      /** @type {boolean} */
      cur.disabled = true;
      current.setAttribute("aria-busy", true);
      current.focus();
    };
    /**
     * @param {string} el
     * @return {?}
     */
    o.isValidParameter = function(el) {
      return defaults.hasOwnProperty(el) || "extraParams" === el;
    };
    /**
     * @param {Object} settings
     * @return {?}
     */
    o.setDefaults = function(settings) {
      if (!settings || "object" !== (undefined === settings ? "undefined" : parse(settings))) {
        return done("the argument for setDefaults() is required and has to be a object");
      }
      var p;
      for (p in settings) {
        if (!o.isValidParameter(p)) {
          onerror('Unknown parameter "' + p + '"');
          delete settings[p];
        }
      }
      extend(params, settings);
    };
    /**
     * @return {undefined}
     */
    o.resetDefaults = function() {
      params = extend({}, defaults);
    };
    /**
     * @return {undefined}
     */
    o.noop = function() {
    };
    /** @type {string} */
    o.version = "6.10.2";
    /** @type {function (): ?} */
    o.default = o;
    return o;
  });
  if (window.Sweetalert2) {
    window.sweetAlert = window.swal = window.Sweetalert2;
  }
  ;